/*
{
    "title" : "Deploy Jenkins configuration.",
    "job_name" : "deployJenkinsConfig",
    "docs" : "",
    "parent" : "codeDeploy",
    "notes" : [
        "description" : "Deploys a new jenkins.yaml file to it-jenkins instances."
    ]
}
*/
import groovy.json.JsonSlurperClassic

pipeline {
    agent any
    stages {
        stage ('00 - Get jenkins.yaml params prod') {
            when {
                changeset "**/jenkins.yaml"
                expression {
                    !env.JENKINS_URL.contains("staging")
                }
            }
            steps {
                script {
                    env.response = sh(
                        script: """
                            aws secretsmanager get-secret-value --secret-id $awsSMJenkinsYamlConfigParamsId-prod --region $awsRegion
                        """,
                        returnStdout: true
                    ).trim()
                }
            }
        }
        stage ('05 - Get jenkins.yaml params staging') {
            when {
                changeset "**/jenkins.yaml"
                expression {
                    env.JENKINS_URL.contains("staging")
                }
            }
            steps {
                script {
                    env.response = sh(
                        script: """
                            aws secretsmanager get-secret-value --secret-id $awsSMJenkinsYamlConfigParamsId-staging --region $awsRegion
                        """,
                        returnStdout: true
                    ).trim()
                }
            }
        }
        stage ('10 - Prepare jenkins.yaml') {
            when {
                changeset "**/jenkins.yaml"
            }
            steps {
                script {
                    // parse json response
                    def secretValue = new JsonSlurperClassic().parseText(new JsonSlurperClassic().parseText(env.response)['SecretString'])
                    // build step  to prepare jenkins.yaml config
                    build(
                        job: 'codeDeploy/prepareJcasc', 
                        propagate: true, 
                        wait: true,
                        parameters: [
                            stringParam(name: 'gitAccount', value: secretValue['gitAccount']),
                            stringParam(name: 'gitRepo', value: secretValue['gitRepo']),
                            stringParam(name: 'gitBranch', value: secretValue['gitBranch']),
                            stringParam(name: 'hostname', value: secretValue['hostname']),
                            stringParam(name: 'serviceName', value: secretValue['serviceName']),
                            stringParam(name: 'domainName', value: secretValue['domain']),
                            stringParam(name: 'adminUsername', value: secretValue['adminUsername']),
                            stringParam(name: 'adminEmail', value: secretValue['adminEmail']),
                            stringParam(name: 's3ExportDirectory', value: secretValue['s3ExportDirectory'])
                            stringParam(name: 'awsRegion', value: secretValue['awsRegion'])
                        ]
                    )
                }
            }
        }
        stage ('15 - Reload jenkins.yaml') {
            when {
                changeset "**/jenkins.yaml"
            }
            steps {
                script {
                    // build step to reload jenkins config yaml
                    build(
                        job: 'codeDeploy/reloadJcasc', 
                        propagate: true, 
                        wait: true
                    )
                }
            }
        } 
    }
}
