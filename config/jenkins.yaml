jobs:
  - script: >
      folder('codeDeploy') {
        displayName('Code Deploy')
        description('contains pipelines used for deploying jenkins configs.')
      }
  - script: >
      pipelineJob('codeDeploy/deployJenkinsConfig') {
        description('deploys a new config and or job.')
        parameters {
          stringParam('gitBranch', '*/nabil/ol-token-rotation', 'githup branch to use.')
          stringParam('gitAccount', 'nabilhq', 'github account the repo belongs to.')
          stringParam('gitRepo', 'jenkins-it', 'github repo to use.')
        }
        triggers {
          githubPush()
        }
        definition {
          cpsScm {
            scriptPath 'jobs/codeDeploy/deployJenkinsConfig/Jenkinsfile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('jenkins-it-prod-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('codeDeploy/prepareJcasc') {
        description('prepares the jenkins casc config for deployment.')
        parameters {
          stringParam('gitBranch', null, 'githup branch to use.')
          stringParam('gitAccount', null, 'github account the repo belongs to.')
          stringParam('gitRepo', null, 'github repo to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/codeDeploy/prepareJcasc/Jenkinsfile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('jenkins-it-prod-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('codeDeploy/reloadJcasc') {
        description('reloads the jenkins casc config.')
        parameters {
          stringParam('gitBranch', null, 'githup branch to use.')
          stringParam('credentialId', 'jenkins-it-prod-api-creds', 'id of jenkins api credential.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/codeDeploy/reloadJcasc/Jenkinsfile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('jenkins-it-prod-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      folder('apiTokenRotation') {
        displayName('API Token Rotation')
        description('contains pipelines that rotate api tokens.')
      }
  - script: >
      pipelineJob('apiTokenRotation/oneloginManageAll') {
        description('rotates the onelogin api token.')
        parameters {
          stringParam('credentialId', 'jenkins-it-prod-ol-api-client-creds-manage-all', 'id of the credential to use.')
          stringParam('awsSecretId', 'jenkins-it-prod-ol-api-access-token-manage-all', 'id of the aws secret to store the new access token.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/apiTokenRotation/onelogin/Jenkinsfile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('jenkins-it-prod-github-creds')
                }
                branch('*/main')
                extensions {}
              }
            }
            lightweight(lightweight = true)
          }
        }
      }
  - script: >
      pipelineJob('apiTokenRotation/oneloginRead') {
        description('rotates the onelogin api token.')
        parameters {
          stringParam('credentialId', 'jenkins-it-prod-ol-api-client-creds-read', 'id of the credential to use.')
          stringParam('awsSecretId', 'jenkins-it-prod-ol-api-access-token-read', 'id of the aws secret to store the new access token.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/apiTokenRotation/onelogin/Jenkinsfile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('jenkins-it-prod-github-creds')
                }
                branch('*/main')
                extensions {}
              }
            }
            lightweight(lightweight = true)
          }
        }
      }
  - script: >
      folder('oneloginApiV2') {
        displayName('OneLogin API v2')
        description('contains pipelines that invoke onelogin api v2 enpoints.')
      }
  - script: >
      pipelineJob('oneloginApiV2/revokeOneloginToken') {
        description('Revoke an access token and refresh token pair.')
        parameters {
          stringParam('clientCredentialId', null, 'id of the client credential.')
          stringParam('accessTokenCredentialId', null, 'id of the access token token credential.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oneloginApiV2/revokeOneloginToken/Jenkinsfile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('jenkins-it-prod-github-creds')
                }
                branch('*/main')
                extensions {}
              }
            }
            lightweight(lightweight = true)
          }
        }
      }
  - script: >
      pipelineJob('oneloginApiV2/getOneloginUsers') {
        description('returns onelogin user(s).; if no params are provided this pipeline returns all users.')
        parameters {
          stringParam('credentialId', null, 'id of the credential to use.')
          stringParam('email', null, 'email of the user to return.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oneloginApiV2/getOneloginUsers/Jenkinsfile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('jenkins-it-prod-github-creds')
                }
                branch('*/main')
                extensions {}
              }
            }
            lightweight(lightweight = true)
          }
        }
      }