jenkins:
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  authorizationStrategy:
    globalMatrix:
      permissions:
      - "Overall/Administer:{adminUsername}"
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  disableRememberMe: false
  disabledAdministrativeMonitors:
  - "jenkins.security.QueueItemAuthenticatorMonitor"
  labelAtoms:
  - name: "master"
  markupFormatter: "plainText"
  mode: NORMAL
  myViewsTabBar: "standard"
  numExecutors: 15
  primaryView:
    all:
      name: "all"
  projectNamingStrategy: "standard"
  quietPeriod: 0
  remotingSecurity:
    enabled: true
  scmCheckoutRetryCount: 0
  slaveAgentPort: -1
  updateCenter:
    sites:
    - id: "default"
      url: "https://updates.jenkins.io/update-center.json"
  views:
  - all:
      name: "all"
  viewsTabBar: "standard"
security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  copyartifact:
    mode: PRODUCTION
  sSHD:
    port: -1
  scriptApproval:
    approvedSignatures:
    - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
    - "new groovy.json.JsonSlurperClassic"
    - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getAt java.lang.Object\
      \ java.lang.String"
    - "staticMethod io.jenkins.plugins.casc.ConfigurationAsCode get"
    - "method io.jenkins.plugins.casc.ConfigurationAsCode configure"
unclassified:
  awsCredentialsProvider:
    cache: true
    listSecrets:
      filters:
      - key: "tag-key"
        values:
        - "Service"
      - key: "tag-value"
        values:
        - "{serviceName}"
  buildDiscarders:
    configuredBuildDiscarders:
    - "jobBuildDiscarder"
  fingerprints:
    fingerprintCleanupDisabled: false
    storage: "file"
  gitHubConfiguration:
    apiRateLimitChecker: ThrottleForNormalize
  gitHubPluginConfig:
    configs:
    - credentialsId: "{serviceName}-github-at"
      manageHooks: false
      name: "github"
    hookSecretConfigs:
    - credentialsId: "{serviceName}-github-webhook-shared-secret"
    hookUrl: "https://{hostname}.{domain}/github-webhook/"
  gitSCM:
    createAccountBasedOnEmail: false
    showEntireCommitSummaryInChanges: false
    useExistingAccountWithSameEmail: false
  globalSlackNotifier:
    notifyOnAborted: false
    notifyOnFail: true
    notifyOnNotBuilt: false
    notifyOnSuccess: true
    notifyOnUnstable: false
    failureMessage: "@channel"
  junitTestResultStorage:
    storage: "file"
  location:
    adminAddress: "{adminEmail}"
    url: "https://{hostname}.{domain}/"
  mailer:
    charset: "UTF-8"
    useSsl: false
    useTls: false
  mavenModuleSet:
    localRepository: "default"
  pollSCM:
    pollingThreadCount: 10
  slackNotifier:
    botUser: false
    sendAsText: false
  upstream:
    globalUpstreamFilterStrategy: UseOldest
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
  mavenGlobalConfig:
    globalSettingsProvider: "standard"
    settingsProvider: "standard"
jobs:
  - script: >
      folder('archive') {
        displayName('Job Archive')
        description('contains pipelines that have been archived.')
      }
  - script: >
      folder('codeDeploy') {
        displayName('Code Deploy')
        description('contains pipelines used for deploying jenkins configs.')
      }
  - script: >
      pipelineJob('codeDeploy/deployJenkinsConfig') {
        description('deploys a new config and or job.')
        parameters {
          stringParam('awsSMJenkinsYamlConfigParamsId', 'it-jenkins-jenkins-yaml-config-params', 'id of the aws secret with jenkins.yaml config params.')
          stringParam('awsRegion', '{awsRegion}', 'aws region where the aws secret is.')
        }
        triggers {
          githubPush()
        }
        definition {
          cpsScm {
            scriptPath 'jobs/codeDeploy/deployJenkinsConfig/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('{githubBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('codeDeploy/prepareJcasc') {
        description('prepares the jenkins casc config for deployment.')
        parameters {
          stringParam('gitAccount', null, 'github account the repo belongs to.')
          stringParam('gitRepo', null, 'github repo to use.')
          stringParam('gitBranch', null, 'githup branch to use.')
          stringParam('serviceName', null, 'service name to use when preparing the jcasc file.')
          stringParam('hostname', null, 'hostname of the jenkins instance.')
          stringParam('domainName', null, 'domain name to use when preparing the jcasc file.')
          stringParam('adminUsername', null, 'jenkins admin user name to use when preparing the jcasc file.')
          stringParam('adminEmail', null, 'jenkins admin email to use when preparing the jcasc file.')
          stringParam('s3ExportDirectory', null, 's3 bucket path to export response files to.')
          stringParam('awsRegion', null, 'aws region to use.')
          booleanParam('clearCronTriggers', false, 'if set to true, will clear all cron triggers.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/codeDeploy/prepareJcasc/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      job('codeDeploy/reloadJcasc') {
        description('reloads the jenkins.yaml config.')
        steps {
          systemGroovyCommand("""
            import io.jenkins.plugins.casc.ConfigurationAsCode;
            ConfigurationAsCode.get().configure()
          """.stripIndent()){
            sandbox(true)
          }
        }
      }
  - script: >
      folder('apiTokenRotation') {
        displayName('API Token Rotation')
        description('contains pipelines that rotate api tokens.')
      }
  - script: >
      pipelineJob('apiTokenRotation/oneloginManageAll') {
        description('rotates the onelogin api token.')
        parameters {
          stringParam('credentialId', 'it-jenkins-prod-ol-api-client-creds-manage-all', 'id of the credential to use.')
          stringParam('awsSecretId', 'it-jenkins-prod-ol-api-access-token-manage-all', 'id of the aws secret to store the new access token.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/apiTokenRotation/apiTokenRotation/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('apiTokenRotation/oneloginRead') {
        description('rotates the onelogin api token.')
        parameters {
          stringParam('credentialId', 'it-jenkins-prod-ol-api-client-creds-read', 'id of the credential to use.')
          stringParam('awsSecretId', 'it-jenkins-prod-ol-api-access-token-read', 'id of the aws secret to store the new access token.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/apiTokenRotation/apiTokenRotation/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      folder('oneloginApiV2') {
        displayName('OneLogin API V2')
        description('contains pipelines that invoke onelogin api v2 enpoints.')
      }
  - script: >
      pipelineJob('oneloginApiV2/revokeOneloginToken') {
        description('Revoke an access token and refresh token pair.')
        parameters {
          stringParam('clientCredentialId', null, 'id of the client credential.')
          stringParam('accessTokenCredentialId', null, 'id of the access token token credential.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oneloginApiV2/revokeOneloginToken/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('oneloginApiV2/getOneloginUsers') {
        description('returns onelogin user(s).; if no params are provided this pipeline returns all users.')
        parameters {
          stringParam('s3ExportDirectory', '{s3ExportDirectory}', 'S3 bucket to export the json response to.')
          stringParam('credentialId', 'it-jenkins-prod-ol-api-access-token-read', 'id of the credential to use.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oneloginApiV2/getOneloginUsers/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('oneloginApiV2/getOneloginUserById') {
        description('Use this API to get back a single user from a OneLogin account.')
        parameters {
          stringParam('id', null, 'id of the user to return.')
          stringParam('credentialId', 'it-jenkins-prod-ol-api-access-token-read', 'id of the credential to use.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oneloginApiV2/getOneloginUserById/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('oneloginApiV2/getOneloginUserByEmail') {
        description('Use this API to get back a single user from a OneLogin account.')
        parameters {
          stringParam('email', null, 'email of the user to return.')
          stringParam('credentialId', 'it-jenkins-prod-ol-api-access-token-read', 'id of the credential to use.')
          stringParam('oneloginDomainRegion', 'us', 'domain for region that your OneLogin account resides in.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oneloginApiV2/getOneloginUserByEmail/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      folder('oktaAPI') {
        displayName('Okta API')
        description('contains pipelines that invoke okta api enpoints.')
      }
  - script: >
      pipelineJob('oktaAPI/getOktaUserWithId') {
        description('Fetches a specific user when you know the user id.')
        parameters {
          stringParam('id', null, 'id of the user to return.')
          stringParam('credentialId', 'it-jenkins-prod-okta-api-token', 'id of the credential to use.')
          stringParam('oktaDomain', null, 'okta domain to target.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oktaAPI/getOktaUserWithId/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }
  - script: >
      pipelineJob('oktaAPI/getOktaUserWithLogin') {
        description('Fetches a specific user when you know the user login.')
        parameters {
          stringParam('login', null, 'login of the user to return.')
          stringParam('credentialId', 'it-jenkins-prod-okta-api-token', 'id of the credential to use.')
          stringParam('oktaDomain', null, 'okta domain to target.')
          stringParam('gitBranch', '{githubBranch}', 'github branch to use.')
        }
        definition {
          cpsScm {
            scriptPath 'jobs/oktaAPI/getOktaUserWithLogin/JenkinsFile'
            scm {
              git {
                remote { 
                  url 'https://github.com/{gitAccount}/{gitRepo}'
                  credentials('it-jenkins-github-creds')
                }
                branch('^${gitBranch}')
                extensions {}
              }
            }
            lightweight(lightweight = false)
          }
        }
      }